pipeline {
    agent any
    tools{
        maven 'maven3'
        jdk 'jdk17'
    }
    
    environment{
        SCANNER_HOME= tool 'sonar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Pulipati95/EKart.git'
            }
        }
    
   
        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
    
    
        stage('Unit Tests') {
            steps {
                sh "mvn test -DskipTests=true"
            }
        }
        stage('Sonar Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=EKART -Dsonar.projectName=EKART \
                    -Dsonar.java.binaries=. '''
            }
            }
                               }
        stage('OWASP Dependency Check') {
            steps {
                dependencyCheck additionalArguments: ' --scan ./', odcInstallation: 'DC'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
                                        }
        stage('Build') {
            steps {
                sh "mvn package -DskipTests=true"
            }
        }
        stage('Deploy to Nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'global-maven', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                sh "mvn deploy -DskipTests=true"

            }
        }
        }
        stage('Docker build and tag Image') {
            steps {
                script{
                  withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker'){
                  sh "docker build -t bhargavd1995/ekart:latest -f docker/Dockerfile ."    
            }
        }
    }
}
      stage('Trivy scan') {
            steps {
                sh "trivy image bhargavd1995/ekart:latest > trivy-report.txt"
            }
        }
      stage('Docker Push') {
            steps {
                script{
                  withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker'){
                  sh "docker push bhargavd1995/ekart:latest"    
            }
        }
    }
}

      stage('Kubernetes deploy') {
             steps {
                 withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://172.31.82.179:6443') {
                 sh "kubectl apply -f deploymentservice.yml -n webapps"
                 sh "kubectl get svc -n webapps"
}
    
    } 
}
    
 }
}
